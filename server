import logging
from http.server import BaseHTTPRequestHandler, HTTPServer
import subprocess
import json
import os

# Setup logging to file
log_file_path = '/etc/xray/api.log'
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', handlers=[
    logging.FileHandler(log_file_path),
    logging.StreamHandler()
])

# Read API tokens from file
with open('/etc/xray/.key', 'r') as token_file:
    valid_tokens = [line.strip() for line in token_file if line.strip()]

class RequestHandler(BaseHTTPRequestHandler):
    def log_request_info(self, additional_info=''):
        client_ip = self.client_address[0]
        user_agent = self.headers.get('User-Agent', 'User-Agent not provided')
        logging.info(f'Access from IP: {client_ip}, User-Agent: {user_agent}, Path: {self.path}, {additional_info}')

    def do_AUTHHEAD(self):
        self.send_response(401)
        self.send_header('WWW-Authenticate', 'Token realm=\"Authentication required\"')
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(b'{"message": "Unauthorized: Missing or invalid Authorization header"}')
        self.log_request_info('Unauthorized access attempt')
        logging.warning('Unauthorized access attempt')

    def authorize(self):
        auth_header = self.headers.get('Authorization')
        if auth_header is None:
            self.do_AUTHHEAD()
            return False

        provided_token = auth_header.strip()
        if provided_token not in valid_tokens:
            self.do_AUTHHEAD()
            return False
        return True

    def execute_script(self, script_path, post_data=None):
        if not os.path.isfile(script_path):
            self.send_response(404)
            self.end_headers()
            self.wfile.write(b'Script not found')
            self.log_request_info(f'Script not found: {script_path}')
            logging.error(f'Script not found: {script_path}')
            return

        try:
            if post_data:
                result = subprocess.run([script_path], input=post_data, capture_output=True, text=True, check=True)
            else:
                result = subprocess.run([script_path], capture_output=True, text=True, check=True)
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(result.stdout.encode())
            self.log_request_info(f'Successfully executed script: {script_path}')
            logging.info(f'Successfully executed script: {script_path}, Output: {result.stdout}')
        except subprocess.CalledProcessError as e:
            self.send_response(500)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            error_message = json.dumps({"error": str(e)})
            self.wfile.write(error_message.encode())
            self.log_request_info(f'Error executing script: {script_path}, Error: {str(e)}')
            logging.error(f'Error executing script: {script_path}, Error: {str(e)}')

    def do_GET(self):
        if not self.authorize():
            return

        path = self.path.lstrip('/')
        script_path = f'/usr/bin/rere/{path}'
        logging.info(f'GET request for: {script_path}')

        self.execute_script(script_path)

    def do_POST(self):
        if not self.authorize():
            return

        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length).decode('utf-8')

        path = self.path.lstrip('/')
        script_path = f'/usr/bin/rere/{path}'
        logging.info(f'POST request for: {script_path} with data: {post_data}')

        self.execute_script(script_path, post_data)

    def do_DELETE(self):
        if not self.authorize():
            return

        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length).decode('utf-8')

        path = self.path.lstrip('/')
        script_path = f'/usr/bin/rere/{path}'
        logging.info(f'DELETE request for: {script_path} with data: {post_data}')

        self.execute_script(script_path, post_data)

    def do_PUT(self):
        if not self.authorize():
            return

        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length).decode('utf-8')

        path = self.path.lstrip('/')
        script_path = f'/usr/bin/rere/{path}'
        logging.info(f'PUT request for: {script_path} with data: {post_data}')

        self.execute_script(script_path, post_data)

    def do_PATCH(self):
        if not self.authorize():
            return

        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length).decode('utf-8')

        path = self.path.lstrip('/')
        script_path = f'/usr/bin/rere/{path}'
        logging.info(f'PATCH request for: {script_path} with data: {post_data}')

        self.execute_script(script_path, post_data)

    def do_CONNECT(self):
        if not self.authorize():
            return

        path = self.path.lstrip('/')
        script_path = f'/usr/bin/rere/{path}'
        logging.info(f'CONNECT request for: {script_path}')

        self.execute_script(script_path)

    def do_TRACE(self):
        if not self.authorize():
            return

        path = self.path.lstrip('/')
        script_path = f'/usr/bin/rere/{path}'
        logging.info(f'TRACE request for: {script_path}')

        self.execute_script(script_path)

    def do_HEAD(self):
        if not self.authorize():
            return

        path = self.path.lstrip('/')
        script_path = f'/usr/bin/rere/{path}'
        logging.info(f'HEAD request for: {script_path}')

        self.execute_script(script_path)

    def do_OPTIONS(self):
        if not self.authorize():
            return

        path = self.path.lstrip('/')
        script_path = f'/usr/bin/rere/{path}'
        logging.info(f'OPTIONS request for: {script_path}')

        self.send_response(200)
        self.send_header('Allow', 'GET, POST, DELETE, PUT, PATCH, CONNECT, TRACE, HEAD, OPTIONS')
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(b'{"message": "OPTIONS request received"}')
        self.log_request_info()

def run(server_class=HTTPServer, handler_class=RequestHandler, port=9000):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    logging.info(f'Starting httpd server on port {port}')
    httpd.serve_forever()

if __name__ == "__main__":
    run()